{"ast":null,"code":"class Api {\n  constructor(settings) {\n    this._url = settings.url;\n    this._cohort = settings.cohort;\n    this._token = settings.token;\n  } //Базовый метод получения результата запроса\n\n\n  getRes(res) {\n    if (res.ok) {\n      //console.log(`Запрос обработан успешно: ${res}`);\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка получения данных с сервера: ${res.status}`);\n    }\n  }\n\n  //Методы карточек\n  //1. Получить данные карточек\n  getCards() {\n    return fetch(`${this._url}/${this._cohort}/cards`, {\n      method: 'GET',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(this.getRes);\n  }\n\n  //2. Добавить карточку\n  addCard(name, url) {\n    return fetch(`${this._url}/${this._cohort}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        link: url\n      })\n    }).then(this.getRes);\n  }\n\n  //Промежуточный метод: установить лайк-статус\n  setCardLikeStatus(status) {\n    if (status === true) {\n      return 'PUT';\n    } else {\n      return 'DELETE';\n    }\n  } //Применение лайк-статуса к методу лайка карточки:\n\n\n  likeCard(cardId, likeStatus) {\n    return fetch(`${this._url}/${this._cohort}/cards/likes/${cardId}`, {\n      method: this.setCardLikeStatus(likeStatus),\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(this.getRes);\n  }\n\n  //Удалить карточку\n  deleteCard(cardId) {\n    return fetch(`${this._url}/${this._cohort}/cards/${cardId}`, {\n      method: \"DELETE\",\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(this.getRes);\n  }\n\n  //Методы пользователя\n  //Получить данные пользователя\n  getUser() {\n    return fetch(`${this._url}/${this._cohort}/users/me`, {\n      method: 'GET',\n      headers: {\n        authorization: this._token\n      }\n    }).then(this.getRes);\n  }\n\n  //Установить новые ДП\n  setUser(data) {\n    return fetch(`${this._url}/${this._cohort}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.editProfileName,\n        about: data.editProfileJob\n      })\n    }).then(this.getRes);\n  }\n\n  //Редактировать аватар\n  editAvatar(url) {\n    return fetch(`${this._url}/${this._cohort}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: url\n      })\n    }).then(this.getRes);\n  }\n\n}\n\nconst apiSettings = {\n  url: \"https://mesto.nomoreparties.co/v1\",\n  cohort: \"cohort-20\",\n  token: \"d7e2da9f-ccdc-4136-a46f-5fb3950e2feb\"\n};\nconst api = new Api(apiSettings);\nexport default api;","map":{"version":3,"sources":["/home/fmkrom/dev/proj2/mesto-react/src/components/Api.js"],"names":["Api","constructor","settings","_url","url","_cohort","cohort","_token","token","getRes","res","ok","json","Promise","reject","status","getCards","fetch","method","headers","authorization","then","addCard","name","body","JSON","stringify","link","setCardLikeStatus","likeCard","cardId","likeStatus","deleteCard","getUser","setUser","data","editProfileName","about","editProfileJob","editAvatar","avatar","apiSettings","api"],"mappings":"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","sourcesContent":["class Api {\n    constructor(settings){\n        this._url = settings.url;\n        this._cohort = settings.cohort;\n        this._token = settings.token;\n    }\n\n    //Базовый метод получения результата запроса\n\n    getRes(res){\n        if (res.ok) {\n          //console.log(`Запрос обработан успешно: ${res}`);\n          return res.json();\n        } else {\n          return Promise.reject(`Ошибка получения данных с сервера: ${res.status}`);\n        }\n    };\n    \n    //Методы карточек\n\n    //1. Получить данные карточек\n    getCards(){\n      return fetch(`${this._url}/${this._cohort}/cards`,\n      {\n       method: 'GET',\n       headers: {\n            authorization: this._token,\n            'Content-Type': 'application/json'\n          },\n      }).then(this.getRes);\n    };\n\n    //2. Добавить карточку\n    addCard(name, url){\n      return fetch(`${this._url}/${this._cohort}/cards`,\n        {\n        method: 'POST',\n        headers:{\n            authorization: this._token,\n            'Content-Type': 'application/json'\n          }, \n          body:JSON.stringify({\n              name: name,\n              link: url\n          })\n        }\n      ).then(this.getRes);\n    };\n\n    //Промежуточный метод: установить лайк-статус\n    setCardLikeStatus(status){\n        if (status === true){\n          return 'PUT'\n        } else {\n          return 'DELETE'\n        }\n    }\n\n    //Применение лайк-статуса к методу лайка карточки:\n    likeCard(cardId, likeStatus){\n      return fetch(`${this._url}/${this._cohort}/cards/likes/${cardId}`,\n        {\n          method: this.setCardLikeStatus(likeStatus),\n          headers:{\n            authorization: this._token,\n            'Content-Type': 'application/json'\n          },\n        }\n      ).then(this.getRes);\n    };\n\n    //Удалить карточку\n    deleteCard(cardId){\n      return fetch(`${this._url}/${this._cohort}/cards/${cardId}`,\n        {\n          method: \"DELETE\",\n          headers:{\n            authorization: this._token,\n            'Content-Type': 'application/json'\n          }\n        }\n      ).then(this.getRes);\n    };\n\n    //Методы пользователя\n\n    //Получить данные пользователя\n    getUser(){\n      return fetch(`${this._url}/${this._cohort}/users/me`,\n        {\n          method: 'GET',\n          headers: {\n            authorization: this._token\n          }\n        }\n      ).then(this.getRes)\n    };\n    \n    //Установить новые ДП\n    setUser(data){\n      return fetch(`${this._url}/${this._cohort}/users/me`,\n        {\n          method: 'PATCH',\n          headers: {\n            authorization: this._token,\n            'Content-Type': 'application/json'\n          }, \n          body: JSON.stringify({\n            name: data.editProfileName,\n            about: data.editProfileJob\n          })\n      }).then(this.getRes)\n    };\n\n    //Редактировать аватар\n    editAvatar(url){\n      return fetch(`${this._url}/${this._cohort}/users/me/avatar`,\n      {\n        method: 'PATCH',\n        headers: {\n          authorization: this._token,\n          'Content-Type': 'application/json'\n        }, \n        body: JSON.stringify({\n          avatar: url\n        })\n      }\n      ).then(this.getRes)\n    };\n}\n\nconst apiSettings = {\n  url: \"https://mesto.nomoreparties.co/v1\",\n  cohort: \"cohort-20\",\n  token: \"d7e2da9f-ccdc-4136-a46f-5fb3950e2feb\"\n};    \n\nconst api = new Api (apiSettings);\n\nexport default api;\n\n\n"]},"metadata":{},"sourceType":"module"}